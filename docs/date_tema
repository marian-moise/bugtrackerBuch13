Tables: (* -> OPTIONAL, will not appear in column name)
		[^ -> AutoGenerated]
- project
	- ^projectId
	- name
	- identifier
	- *description

- issue
	- ^issueId
	- title
	- *description
	- projectId
	- dateCreated
	- ^statusId (default value of statusName of New)
	- *submitterId (links to userId)
	- typeId

- comment
	- ^commentId
	- commentText
	- dateTimeCreated
	- submitterId (links to userId)

- type
	- ^typeId
	- typeName (ex. "Bug", "Feature", "Change Request")

- status
	- ^statusId
	- statusName (ex. "New", "In Progress", "Done")

- user
	- ^userId
	- userName


Entities :
All tables should be mapped to entities.
Based on table relationships we will map the entities as well.
We shall have constructors for all the fields, and an additional constructor for only the mandatory fields if there are any.
Ex. project : 2 constructors. 1 has all 3 fields, another has only 2 fields.

ex. in comment : the constructor will contain :
	commentText, submitterId
	in the constructor we shall set the dateTimeCreated by ourselves and not receive it from the outside.
	public Comment(String commentText, Integer submitterID){
		this.commentText = commentText;
		this.submitterId = submitterId;
		this.dateTimeCreated = new LocalDateTime();
	}


Services:
 	Should all contain CRUD methods (google CRUD :D )
 	at the read methods :
 	we should have, for each entity, if it makes sense, a method that returns either an entity by ID, or all entities as a list.

 	ex. public Project getProjectByID(Integer id);
 		public List<Project> getAllProjects();


 	project should have : getAll; getById; optional : getByIdentifier
 	issue should have : getAllByProjectId; getById;
 	comment should have : getAllByIssueId; getById;


